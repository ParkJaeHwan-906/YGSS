pipeline {
  agent any

  environment {
    DOCKER_IMAGE  = 'ygss-backend'
    AI_IMAGE      = 'ygss-ai'
    DOCKER_TAG    = 'prod-latest'
    AI_TAG        = 'prod-latest'
    K8S_NAMESPACE = 'ygss-prod'

    MYSQL_PASSWORD = credentials('mysql-password')
    JWT_SECRET     = credentials('jwt-secret')
    GMS_SECRET_KEY = credentials('gms-secret-key')
    REDIS_PASSWORD = credentials('redis-password')
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    timeout(time: 30, unit: 'MINUTES')
    timestamps()
    disableConcurrentBuilds()
  }

  stages {
    stage('체크아웃 & 변경분석') {
      steps {
        git branch: 'master',
            url: 'https://lab.ssafy.com/s13-bigdata-recom-sub1/S13P21A103.git',
            credentialsId: 'gitlab-git-token'

        script {
          env.GIT_COMMIT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
          
          // 소스 해시 계산 (폭넓게 감지)
          def backendHash = sh(
            script: '''
              find backend/ -name "*.java" -o -name "*.gradle" -o -name "Dockerfile" -o -name "*.yml" -o -name "*.properties" | \
              xargs sha256sum | sort | \
              cat - k8s/base/backend/deployment.yml k8s/base/backend/configmap.yml k8s/overlays/prod/patch-backend.yml | \
              sha256sum | cut -d" " -f1
            ''',
            returnStdout: true
          ).trim()
          
          def aiHash = sh(
            script: '''
              find ai/ -name "*.py" -o -name "requirements.txt" -o -name "Dockerfile*" | \
              xargs sha256sum | sort | \
              cat - k8s/base/ai/deployment.yml k8s/base/ai/configmap.yml k8s/overlays/prod/patch-ai.yml | \
              sha256sum | cut -d" " -f1
            ''',
            returnStdout: true
          ).trim()
          
          // 이전 해시 읽기
          def prevHashes = sh(
            script: 'cat /tmp/jenkins-hashes 2>/dev/null || echo "backend:none,ai:none"',
            returnStdout: true
          ).trim()
          
          def prevBackend = prevHashes.split(',')[0].split(':')[1]
          def prevAi = prevHashes.split(',')[1].split(':')[1]
          
          // 변경 여부 확인
          env.BUILD_BACKEND = (backendHash != prevBackend) ? 'true' : 'false'
          env.BUILD_AI = (aiHash != prevAi) ? 'true' : 'false'
          env.BACKEND_HASH = backendHash
          env.AI_HASH = aiHash
          
          echo """
변경분석:
• Backend: ${env.BUILD_BACKEND} (${prevBackend} → ${backendHash})
• AI: ${env.BUILD_AI} (${prevAi} → ${aiHash})
          """
        }
      }
    }

    stage('백엔드 빌드') {
      when {
        environment name: 'BUILD_BACKEND', value: 'true'
      }
      steps {
        dir('backend') {
          sh '''
            chmod +x ./gradlew
            ./gradlew clean build -x test --no-daemon
            docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
          '''
        }
      }
    }

    stage('AI 빌드') {
      when {
        environment name: 'BUILD_AI', value: 'true'
      }
      steps {
        script {
          def baseExists = sh(script: 'docker images -q ygss-ai-base:latest || true', returnStdout: true).trim()
          if (!baseExists) {
            dir('ai') {
              sh 'docker build -f Dockerfile.base -t ygss-ai-base:latest .'
            }
          }
        }
        dir('ai') {
          sh 'docker build -t $AI_IMAGE:$AI_TAG .'
        }
      }
    }

    stage('이미지 Import') {
      steps {
        script {
          if (env.BUILD_BACKEND == 'true') {
            sh '''
              docker save $DOCKER_IMAGE:$DOCKER_TAG -o /tmp/backend.tar
              sudo /usr/local/bin/k3s ctr images import /tmp/backend.tar
              rm -f /tmp/backend.tar
            '''
          }
          
          if (env.BUILD_AI == 'true') {
            sh '''
              docker save $AI_IMAGE:$AI_TAG -o /tmp/ai.tar
              sudo /usr/local/bin/k3s ctr images import /tmp/ai.tar
              rm -f /tmp/ai.tar
            '''
          }
        }
      }
    }

    stage('배포') {
      steps {
        sh '''
          kubectl create namespace $K8S_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          kubectl -n $K8S_NAMESPACE create secret generic backend-secrets \
            --from-literal=MYSQL_PASSWORD="$MYSQL_PASSWORD" \
            --from-literal=JWT_SECRET="$JWT_SECRET" \
            --from-literal=GMS_SECRET_KEY="$GMS_SECRET_KEY" \
            --from-literal=REDIS_PASSWORD="$REDIS_PASSWORD" \
            --dry-run=client -o yaml | kubectl apply -f -
          
          cd k8s/overlays/prod
          kubectl apply -k .
        '''
        
        script {
          if (env.BUILD_BACKEND == 'true') {
            sh '''
              kubectl rollout restart deployment/backend -n $K8S_NAMESPACE
              kubectl -n $K8S_NAMESPACE rollout status deployment/backend --timeout=300s
            '''
          }
          if (env.BUILD_AI == 'true') {
            sh '''
              kubectl rollout restart deployment/ai -n $K8S_NAMESPACE
              kubectl -n $K8S_NAMESPACE rollout status deployment/ai --timeout=300s
            '''
          }
        }
      }
    }

    stage('헬스체크') {
      steps {
        sleep(time: 10, unit: 'SECONDS')
        
        script {
          if (env.BUILD_BACKEND == 'true') {
            timeout(time: 2, unit: 'MINUTES') {
              waitUntil {
                def code = sh(script: 'curl -s -o /dev/null -w "%{http_code}" https://j13a103.p.ssafy.io/api/infra || echo 000', returnStdout: true).trim()
                return (code == '200')
              }
            }
          }
          
          if (env.BUILD_AI == 'true') {
            timeout(time: 2, unit: 'MINUTES') {
              waitUntil {
                def code = sh(script: 'curl -s -o /dev/null -w "%{http_code}" https://j13a103.p.ssafy.io/ai/health/ || echo 000', returnStdout: true).trim()
                return (code == '200')
              }
            }
          }
        }
      }
    }

    stage('배포 후 정리') {
      when {
        anyOf {
          environment name: 'BUILD_BACKEND', value: 'true'
          environment name: 'BUILD_AI', value: 'true'
        }
      }
      steps {
        script {
          echo "🧹 배포 성공 후 이미지 정리 시작..."
          
          // Docker 호스트 dangling 이미지 정리
          sh '''
            echo "Docker dangling 이미지 정리 중..."
            docker image prune -f
          '''
          
          // Backend 이미지 개수 기반 정리 (최대 3개 유지)
          if (env.BUILD_BACKEND == 'true') {
            sh '''
              echo "Backend 이미지 개수 확인 및 정리..."
              BACKEND_COUNT=$(docker images ygss-backend --format "table {{.Repository}}" | grep -v REPOSITORY | wc -l)
              echo "현재 Backend 이미지 개수: $BACKEND_COUNT"
              
              if [ "$BACKEND_COUNT" -gt 3 ]; then
                echo "3개 초과 시 오래된 이미지 삭제..."
                OLD_IMAGES=$(docker images ygss-backend --format "{{.ID}} {{.CreatedAt}}" | sort -k2 | head -$((BACKEND_COUNT-3)) | awk '{print $1}')
                if [ ! -z "$OLD_IMAGES" ]; then
                  echo "$OLD_IMAGES" | xargs docker rmi -f
                fi
              fi
            '''
          } else {
            echo "Backend 빌드 안함 → Backend 이미지 정리 스킵"
          }

          // AI 이미지 개수 기반 정리 (최대 2개 유지)
          if (env.BUILD_AI == 'true') {
            sh '''
              echo "AI 이미지 개수 확인 및 정리..."
              AI_COUNT=$(docker images ygss-ai --format "table {{.Repository}}" | grep -v REPOSITORY | wc -l)
              echo "현재 AI 이미지 개수: $AI_COUNT"
              
              if [ "$AI_COUNT" -gt 2 ]; then
                echo "2개 초과 시 오래된 이미지 삭제..."
                OLD_AI_IMAGES=$(docker images ygss-ai --format "{{.ID}} {{.CreatedAt}}" | sort -k2 | head -$((AI_COUNT-2)) | awk '{print $1}')
                if [ ! -z "$OLD_AI_IMAGES" ]; then
                  echo "$OLD_AI_IMAGES" | xargs docker rmi -f
                fi
              fi
            '''
          } else {
            echo "AI 빌드 안함 → AI 이미지 정리 스킵"
          }

          // k3s Backend 이미지 개수 기반 정리
          if (env.BUILD_BACKEND == 'true') {
            sh '''
              echo "k3s Backend 이미지 정리..."
              BACKEND_K3S=$(sudo k3s ctr images ls -q | grep ygss-backend | grep -v -E "prod-latest|infra-latest")
              BACKEND_K3S_COUNT=$(echo "$BACKEND_K3S" | grep -v "^$" | wc -l)
              echo "k3s Backend 이미지 개수 (latest 제외): $BACKEND_K3S_COUNT"
              
              if [ "$BACKEND_K3S_COUNT" -gt 3 ]; then
                echo "3개 초과 시 오래된 k3s Backend 이미지 삭제..."
                OLD_K3S_BACKEND=$(echo "$BACKEND_K3S" | head -$((BACKEND_K3S_COUNT-3)))
                if [ ! -z "$OLD_K3S_BACKEND" ]; then
                  echo "$OLD_K3S_BACKEND" | xargs -r sudo k3s ctr images rm
                fi
              fi
            '''
          }

          // k3s AI 이미지 개수 기반 정리
          if (env.BUILD_AI == 'true') {
            sh '''
              echo "k3s AI 이미지 정리..."
              AI_K3S=$(sudo k3s ctr images ls -q | grep ygss-ai | grep -v -E "prod-latest|infra-latest")
              AI_K3S_COUNT=$(echo "$AI_K3S" | grep -v "^$" | wc -l)
              echo "k3s AI 이미지 개수 (latest 제외): $AI_K3S_COUNT"
              
              if [ "$AI_K3S_COUNT" -gt 2 ]; then
                echo "2개 초과 시 오래된 k3s AI 이미지 삭제..."
                OLD_K3S_AI=$(echo "$AI_K3S" | head -$((AI_K3S_COUNT-2)))
                if [ ! -z "$OLD_K3S_AI" ]; then
                  echo "$OLD_K3S_AI" | xargs -r sudo k3s ctr images rm
                fi
              fi
            '''
          }

          // k3s 테스트용 태그 정리
          sh '''
            echo "k3s 테스트용 태그들 정리..."
            TEST_TAGS=$(sudo k3s ctr images ls -q | grep ygss | grep -E "refactor-|test-|dev-" || true)
            if [ ! -z "$TEST_TAGS" ]; then
              echo "삭제할 테스트 태그들:"
              echo "$TEST_TAGS"
              echo "$TEST_TAGS" | xargs -r sudo k3s ctr images rm
            else
              echo "삭제할 테스트 태그 없음"
            fi
          '''

          // 정리 결과 리포트
          sh '''
            echo "========================================="
            echo "🎯 정리 완료! 현재 상태:"
            echo "📦 Docker 호스트 ygss 이미지: $(docker images | grep ygss | wc -l)개"
            echo "🚀 k3s ygss 이미지: $(sudo k3s ctr images ls -q | grep ygss | wc -l)개"
            echo "========================================="
          '''
        }
      }
    }
  }

  post {
    success {
      script {
        sh "echo 'backend:${env.BACKEND_HASH},ai:${env.AI_HASH}' > /tmp/jenkins-hashes"
      }
    }
    always {
      cleanWs()
    }
  }
}