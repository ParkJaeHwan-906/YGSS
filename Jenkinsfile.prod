pipeline {
  agent any

  environment {
    // 배포 환경 (infra-refactor → master 변경)
    DOCKER_IMAGE  = 'ygss-backend'
    DOCKER_TAG    = "v${BUILD_NUMBER}"          // refactor-${BUILD_NUMBER} → v${BUILD_NUMBER}
    AI_IMAGE      = 'ygss-ai'
    AI_TAG        = "v${BUILD_NUMBER}"          // refactor-${BUILD_NUMBER} → v${BUILD_NUMBER}
    K8S_NAMESPACE = 'ygss-prod'                 // ygss-infra → ygss-prod

    // k3s kubeconfig
    KUBECONFIG = '/etc/rancher/k3s/k3s.yaml'

    // Jenkins Credentials (master에 GMS_SECRET_KEY 추가)
    MYSQL_PASSWORD = credentials('mysql-password')
    JWT_SECRET     = credentials('jwt-secret')
    GMS_SECRET_KEY = credentials('gms-secret-key')  // infra-refactor에는 없었음
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3'))   // infra-refactor: 3 → master: 유지
    timeout(time: 20, unit: 'MINUTES')              // infra-refactor: 20분 → master: 유지
    timestamps()
    disableConcurrentBuilds()
  }

  stages {
    stage('체크아웃') {
      steps {
        echo '🔄 마스터 브랜치 체크아웃'
        git branch: 'master',
            url: 'https://lab.ssafy.com/s13-bigdata-recom-sub1/S13P21A103.git',
            credentialsId: 'gitlab-git-token'

        script {
          env.GIT_COMMIT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        }
        echo "🚀 배포 빌드 시작 - 커밋: ${env.GIT_COMMIT}"
      }
    }

    stage('브랜치 가드') {
      steps {
        script {
          def current = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
          if (!current.contains('master')) {
            error "This pipeline runs only on master branch. Current: ${current}"
          }
        }
      }
    }

    stage('소스 검증') {
      steps {
        sh '''
          set -euo pipefail
          echo "🔍 필수 파일 확인"
          [ -f backend/build.gradle ] || { echo "❌ backend/build.gradle 없음"; exit 1; }
          [ -f backend/Dockerfile   ] || { echo "❌ backend/Dockerfile 없음"; exit 1; }
          [ -f ai/Dockerfile ] || { echo "❌ ai/Dockerfile 없음"; exit 1; }
          [ -f ai/requirements.txt ] || { echo "❌ ai/requirements.txt 없음"; exit 1; }
          [ -d k8s/base ] && [ -d k8s/overlays/prod ] || { echo "❌ k8s overlay 없음"; exit 1; }  // infra-refactor → prod
          echo "✅ 필수 파일 확인 완료"
        '''
      }
    }

    stage('kustomize 설치 확인') {
      steps {
        sh '''
          set -euo pipefail
          if command -v kustomize &> /dev/null; then
            echo "✅ kustomize 이미 설치됨"
          else
            echo "📦 kustomize v5.7.1 설치 중..."
            curl -Lo kustomize.tar.gz "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v5.7.1/kustomize_v5.7.1_linux_amd64.tar.gz"
            tar -xzf kustomize.tar.gz
            sudo mv kustomize /usr/local/bin/
            sudo chmod +x /usr/local/bin/kustomize
            rm -f kustomize.tar.gz
            echo "✅ kustomize 설치 완료"
          fi
        '''
      }
    }

    stage('AI Base Image 확인') {
      steps {
        script {
          def baseExists = sh(
            script: "docker images | grep ygss-ai-base",
            returnStatus: true
          ) == 0
          
          if (!baseExists) {
            echo "🤖 AI Base 이미지 빌드 중..."
            sh "cd ai && docker build -f Dockerfile.base -t ygss-ai-base:latest ."
          } else {
            echo "✅ AI Base 이미지 재사용"
          }
        }
      }
    }

    stage('백엔드 빌드') {
      steps {
        echo '🔨 백엔드 빌드'
        dir('backend') {
          sh '''
            set -euo pipefail
            chmod +x ./gradlew
            ./gradlew clean build -x test --no-daemon
          '''
        }
      }
    }

    stage('AI 서버 빌드') {
      steps {
        echo '🤖 AI FastAPI 서버 빌드'
        dir('ai') {
          sh '''
            set -euo pipefail
            echo "=== AI 빌드 전 파일 확인 ==="
            ls -la src/
            echo "=== Dockerfile 확인 ==="
            cat Dockerfile
            docker build --no-cache -t $AI_IMAGE:$AI_TAG .
            echo "✅ AI 이미지 빌드 완료: $AI_IMAGE:$AI_TAG"
          '''
        }
      }
    }

    stage('Docker 이미지 빌드') {
      steps {
        dir('backend') {
          sh '''
            set -euo pipefail
            echo '🐳 Docker 이미지 빌드'
            docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
            echo "✅ 이미지 빌드 완료: $DOCKER_IMAGE:$DOCKER_TAG"
          '''
        }
      }
    }

    stage('k3s(containerd) 이미지 import') {
      steps {
        sh '''
          set -Eeuo pipefail
          echo "📦 Docker → k3s(containerd) import"

          docker save "$DOCKER_IMAGE:$DOCKER_TAG" -o "/tmp/$DOCKER_IMAGE-$DOCKER_TAG.tar"
          sudo -n /usr/local/bin/k3s ctr images import "/tmp/$DOCKER_IMAGE-$DOCKER_TAG.tar"
          rm -f "/tmp/$DOCKER_IMAGE-$DOCKER_TAG.tar"
          echo "✅ Backend containerd import 완료"
        '''
      }
    }

    stage('AI 이미지 import') {
      steps {
        sh '''
          set -Eeuo pipefail
          echo "📦 AI Docker → k3s(containerd) import"

          docker save "$AI_IMAGE:$AI_TAG" -o "/tmp/$AI_IMAGE-$AI_TAG.tar"
          sudo -n /usr/local/bin/k3s ctr images import "/tmp/$AI_IMAGE-$AI_TAG.tar"
          rm -f "/tmp/$AI_IMAGE-$AI_TAG.tar"
          echo "✅ AI containerd import 완료"
        '''
      }
    }

    stage('K8s Secret 생성') {
      steps {
        sh '''
          set -euo pipefail
          echo '🔐 Kubernetes Secret 생성/업데이트'
          kubectl create namespace $K8S_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

          kubectl -n $K8S_NAMESPACE create secret generic backend-secrets \
            --from-literal=MYSQL_PASSWORD="$MYSQL_PASSWORD" \
            --from-literal=JWT_SECRET="$JWT_SECRET" \
            --from-literal=GMS_SECRET_KEY="$GMS_SECRET_KEY" \
            --dry-run=client -o yaml | kubectl apply -f -

          echo '✅ Secret 생성 완료'
        '''
      }
    }

    stage('Kustomize 매니페스트 준비') {
      steps {
        sh '''
          set -euo pipefail
          echo "⚙️ Kustomize 매니페스트 준비"
          
          cd k8s/overlays/prod
          
          # 이미지 태그 설정
          kustomize edit set image ygss-backend:${DOCKER_TAG}
          kustomize edit set image ygss-ai:${AI_TAG}
          
          # dry-run으로 검증
          kustomize build . | kubectl apply --dry-run=client -f -
          echo "✅ 매니페스트 검증 완료"
        '''
      }
    }

    stage('Kubernetes 배포') {
      steps {
        sh '''
          set -euo pipefail
          echo '🚢 Kubernetes 배포'
          
          cd k8s/overlays/prod
          kubectl apply -k .
          kubectl -n $K8S_NAMESPACE rollout status deployment/backend --timeout=300s
          kubectl -n $K8S_NAMESPACE rollout status deployment/ai --timeout=300s

          echo '=== 리소스 현황 ==='
          kubectl -n $K8S_NAMESPACE get all
        '''
      }
    }

    stage('헬스체크') {
      steps {
        script {
          echo '⏳ Pod 시작 대기 중...'
          sleep(time: 15, unit: 'SECONDS')
          
          echo '🏥 백엔드 헬스체크'
          timeout(time: 3, unit: 'MINUTES') {
            waitUntil {
              def code = sh(
                script: '''
                  curl -s -k -o /dev/null -w "%{http_code}" \
                       --connect-timeout 10 \
                       --max-time 30 \
                       https://j13a103.p.ssafy.io/api/infra || echo 000
                ''',
                returnStdout: true
              ).trim()
              echo "백엔드 헬스체크: ${code}"
              return (code == '200')
            }
          }
          
          echo '🤖 AI 헬스체크'
          timeout(time: 3, unit: 'MINUTES') {
            waitUntil {
              def aiCode = sh(
                script: '''
                  curl -s -k -o /dev/null -w "%{http_code}" \
                       --connect-timeout 10 \
                       --max-time 30 \
                       https://j13a103.p.ssafy.io/ai/health/ || echo 000
                ''',
                returnStdout: true
              ).trim()
              echo "AI 헬스체크: ${aiCode}"
              return (aiCode == '200')
            }
          }
          
          echo '✅ 모든 헬스체크 통과!'
        }
      }
    }

    stage('이미지 정리') {
      steps {
        sh '''
          set -euo pipefail
          echo '🧹 이미지 정리'
          
          # 최근 2개 버전만 유지 (infra-refactor와 동일)
          KEEP=2
          
          # 백엔드 이미지 정리
          TAGS=$(docker images "$DOCKER_IMAGE" --format '{{.Tag}}' | grep -E '^v[0-9]+' | sort -V -r || true)
          COUNT=0
          for t in $TAGS; do
            COUNT=$((COUNT+1))
            if [ $COUNT -le $KEEP ]; then continue; fi
            docker rmi "$DOCKER_IMAGE:$t" 2>/dev/null || true
          done
          
          # AI 이미지 정리
          AI_TAGS=$(docker images "$AI_IMAGE" --format '{{.Tag}}' | grep -E '^v[0-9]+' | sort -V -r || true)
          COUNT=0
          for t in $AI_TAGS; do
            COUNT=$((COUNT+1))
            if [ $COUNT -le $KEEP ]; then continue; fi
            docker rmi "$AI_IMAGE:$t" 2>/dev/null || true
          done
          
          docker image prune -f || true
        '''
      }
    }
  }

  post {
    success {
      echo """
✅ 배포 성공!

• 브랜치: master
• 커밋: ${env.GIT_COMMIT}
• 백엔드: ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}
• AI: ${env.AI_IMAGE}:${env.AI_TAG}

🔗 테스트 엔드포인트:
• 백엔드: https://j13a103.p.ssafy.io/api/infra
• AI: https://j13a103.p.ssafy.io/ai/health/
"""
    }
    failure {
      echo '❌ 배포 실패! 디버깅 정보'
      sh '''
        set -euo pipefail
        echo '=== Pods ==='
        kubectl -n $K8S_NAMESPACE get pods -o wide || true
        echo '=== 백엔드 로그 ==='
        kubectl -n $K8S_NAMESPACE logs -l app=backend --tail=30 || true
        echo '=== AI 로그 ==='
        kubectl -n $K8S_NAMESPACE logs -l app=ai --tail=30 || true
        echo '=== Deployment 상태 ==='
        kubectl -n $K8S_NAMESPACE describe deployment backend || true
        kubectl -n $K8S_NAMESPACE describe deployment ai || true
      '''
    }
    always {
      cleanWs()
    }
  }
}